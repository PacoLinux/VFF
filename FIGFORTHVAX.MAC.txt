























	R3-----POINTS TO BOTTOM OU USER AREA
	R4-----USED AS A TEMPORARY ACCUMULATOR
	R5-----USED AS A TEMPORARY ACCUMULATOR
	R6-----POITS TO CURRENT INSTRUCTION
	R7-----CONTAINS FOERTH W REGISTER
	R8-----POITS TO CURRENT WORD ON RETURN STACK
	R9-----POINTS TO FIRST FREE BYTE IN DATA STACK
	R10----USED AS A TEMPORARY POINTER
	R11----USED AS A TEMPORARY POINTER

				MEMORY MAP
				
	---------------------------------------
	4 SCREEN BUFFERS
	---------------------------------------
	USER AREA
	------------------------------------
	RETURN STACK
	-------------------------------------
	TERMINAL BUFFER
	--------------------
	COMPUTATION STACK
	----------------
	FREE SPACE
	-------------------------
	TEXT BUFFER
	-------------------
	WORD BUFFER
	----------------
	PERMANENT DIRECTORY
	---------------------
	BOOT UP PARAMETERS
	---------------
	I/O INITIALIZATION
	---------------
	




















;		--------------------------------------
;
		.TITLE VAX FIG-FORTH
		.PSECT	VIRTUAL_MACHINE,WRT,EXE,LONG
		.ENTRY	FORTH,^M<R3,R4,R5,R6,R7,R8,R9,R10,R11>

START:	NOP					;TRANSLATE SYS$INPUT FOR I/O USE



		$TRNLOG_S LOGNAM=TTNAME,RSLLEN=NLEN,RSLBUF=DEVDESC
		
		CMPB	NAME,#^X1B
		BNEQ	10$
		SUBL	#4,NLEN
		ADDL	#4,NADDR
10S:	$ASSIGN_S DEVNAM=DEVDESC,CHAN=TTCHAN

		CLRW	TCLC
		$QIO_S	CHAN=TTCHAN,-
		FUNC=#IO$_SETMODE!IO$M_CTRLCAST,-
		P1=CTRLCAST,P3=#3

		
		JMP		COLD
		
FIRSTH	=^XA000
LIMITH	=^XB010



		.WORD	0
TEMP1:	.BLKB	1
CLTC:	.BLKW	1
SEED:	.BLKB	1
TTNAME:	.ASCID	/SYS$INPUT/
TTCHAN:	.BLKW	1
TTIOSB:	.BLKW	1
TTIOLEN:
		.BLKW	1
		.BLKL	1
DEVDESC:
NLEN:	.LONG	63
NADDR:	.LONG	NAME
NAME:	.BLKB	63


		.ALIGN	LONG,0
		$FIBDEF
		$IODEF
		$RMSDEF
NAMBLK:	$NAM
FAB_RBLOCK:

		$FAB	ALQ=1,FAC=GET,FNA=FILNAM,FNS=FILSIZ,-
				FOP=CTG,MRS=1024,NAM=NAMBLK,ORG=SEQ,RFM=FIX
FAB_WBLOCK:
		$FAB	ALQ=1,FAC=PUT,FNA=FILNAM,FNS=FILSIZ,-
				FOP=CTG,MRS=1024,NAM=NAMBLK,ORG=SEQ,RFM=FIX
		













COLD:	CLRL 	R3
		CLRL 	R4
		CLRL	R5
		CLRL R6
		CLRL R7
		CLRL R8
		CLRL R9
		CLRL R10
		CLRL 	R11
		MOVW	#SRTPARM,R10
		MOVW	#FRTH+14,R11
		MOVW	(R10),(R11)
		MOVB	#^X0B,R4
		JMP		PUTF
WARM:	CLRL	R4
		MOVB	#^X08,R4
PUTF:	MOVW	#SRTPARM+^X4,R10
		MOVW	(R10),R3
		MOVW 	#SRTPARM,R10
		MOVW	R3,R11
WRMLP:	MOVW	(R10)+,(R11)+
		SOBGTR	R4,WRMLP
		MOVW	#ABORT+2,R6
		JMP		RP1+2
		
;				START OF FORTH PROGRAM
;
;
;
;				STARTUP PARAMETERS
;

		.ASCII 	/VAX 11-780/
		.BLKW	2
SERTPARM:
		.WORD	TASK-7
		.WORD 	^X7F
		.WORD	FEND+^X5000
		.WORD	FEND+^X4800
		.WORD	FEND+^X4FFF
		.WORD	31
		.WORD	1
		.WORD	FEND
		.WORD	FEND
		.WORD 	FRTH+16
		
		
		
		
		
		.BYTE	^X83
		.ASCII 	/LI/
		.BYTE	^XD4
		.WORD	0
LIT:	.WORD	LIT+2
		ADDW2	#2,R9
		MOVW	(R6)+,(R9)
		MOVW	(R6)+,R7
		MOVZWL	(R7)+,R11
		JMP		(R11)
		
		.BYTE	^X87
		.ASCII	/EXECUT/
		.BYTE	^XC5
		.WORD	LIT-6
EXE:	.WORD	EXE+2
		MOVW	(R9),R7
		SUBW2	#2,R9
		MOVZWL	(R7)+,R11
		JMP		(R11)
		
		.BYTE	^X86
		.ASCII	/BRANC/
		.BYTE	^XC8
		.WORD	EXE-10
BRCH:	.WORD	BRCH+2
		MOVW	(R6)+,R6
		MOVW	(R6)+,R7
		MOVZWL	(R7)+,R11
		JMP		(R11)
		
		.BYTE	^X87
		.ASCII	/0BRANC/
		.BYTE	^XC8
		.WORD	BRCH-9
ZBRCH:	.WORD	ZBRCH+2
		TSTW	(R9)
		BEQLU	ZBR1
		SUBW2	#2,R9
		ADDW2	#2,R6
		MOVW	(R6)+,R7
		MOVZWL	(R7)+,R11
		JMP		(R11)
ZBR1:	SUBW2	#2,R9
		MOVW	(R6)+,R6
		MOVW	(R4)+,R7
		MOVZWL	(R7)+,R11
		JMP		(R11)
		
		.BYTE	^X86
		.ASCII 	/(LOOP/
		.BYTE	^XA9
		.WORD	ZBRCH-10
LUPE:	.WORD	LUPE+2
		ADDW2	#1,(R8)
		MOVW	(R8)+,R11				;INDEX AND TEST FOR LOOP COMPLETION
		SUBW3	R11,(R8)+,R11
		BGTR	LUPE2
		ADDW2	#2,R6
		MOVW	(R6)+,R7
		MOVZWL	(R7)+,R11
		JMP		(R11)
LUPE2:	SUBW2	#4,R8
		MOVW	(R6)+,R6
		MOVW	(R6)+,R7
		MOVZWL	(R7)+,R11
		JMP		(R11)
		
		.BYTE	^X87
		.ASCII	/(+LOOP/
		.BYTE	^XA9
		.WORD	LUPE-9
PLUPE:	.WORD	PLUPE+2
		TSTW	(R9)
		BLSS	NPLUPE
		ADDW3	(R8),(R9),(R8)
		SUBW2	#2,R9
		MOVW	(R8)+,R11
		SUBW3	R11,(R8)+,R11
		BGTR	PLUPE2
		ADDW2	#2,R6
		MOVW	(R6)+,R7
		MOVZWL	(R7)+,R11
		JMP		(R11)
PLUPE2:	SUBW2	#4,R8
		MOVW	(R6)+,R6
		MOVW	(R6)+,R7
		MOVZWL	(R7)+,R11
		JMP		(R11)
NPLUPE:	ADDW3	(R8),(R9),(R8)			; NEGATIVE INCREMENTS ARE HANDLED HERE
		SUBW2	#2,R9
		MOVW	(R8)+,R11
		SUBW2	(R8)+,R11
		BGTR	PLUPE2
		ADDW2	#2,R6
		MOVW	(R6)+,R7
		MOVZWL	(R7)+,R11
		JMP		(R11)
		
		.BYTE	^X84
		.ASCCI	/(DO/
		.BYTE	.^XA9
		.WORD	.PLUPE-10
PDO:	.WORD	PDO+2
		SUBW2	#2,R9
		MOVW	(R9)+,-(R8)
		MOVW	(R9),-(R8)
		SUBW2	#4,R9
		MOVW	(R6)+,R7
		MOVZWL	(R7)+,R11
		JMP 	(R11)
		
		.BYTE	^X85
		.ASCII 	/DIGI/
		.BYTE	^XD4
		.WORD	PDO-7
DGT:	.WORD	GDT+2
		SUBW2	#2,R9
		SUBB3	#^X30,(R9),R5				; UNSUCCESSFUL
		BLSSU	DOK
		CMPB	R5,#^X0A
		BLLSU	DOK
		CMPB	R5,#^X11
		BLSSU	BAD
		CMPA	R5,#^X2B
		BGEQU	BAD
		SUBB2	#^X07,R5
DOK:	ADDW2	#2,R9
		CMPB	R5,(R9)
		BGEQU	BAD
		SUBW2	#2,R9
		MOVW	R5,(R9)+
		MOVW	#1,(R9)
		MOVW	(R6)+,R7
		MOVZWL	(R7)+,R11
		JMP		(R11)
BAD:	MOVW	#0,(R9)
		MOVW	(R6)+,R7
		MOVZWL	(R7)+R11
		JMP		(R11)
		
		.BYTE	^X86
		.ASCII	/(FIND/
		.BYTE	^XA9
		.WORD	DGT-8
.FIND	.WORD	FIND+2



		CLRL	R4
		MOVZWL	(R9),R10
		MOVZWL	-(R3),R11
FIND1:	MOVZWL	(R1),R5
		XORB3	(R10)+,(R11)+,R4
		BITB	#^X3F,R4
		BNEQU	PFIND9
FIND2:	TSTB	(R10)
		BGTR	PFIND8
		XORB3	(R10)+,(R11)+,R4
		BITB	#^X7F,R4
		BEQLU	FOUND
PFIND3:	TSTW	(R10)
		BNEQU	BOK
		CLRW	(R9)
		MOVW	(R6)+,R7
		MOVZWL	(R7)+,R11
		JMP		(R11)
PFIND8:	XORB3	(R19)+,(R11)+,R4
		BEQLU	FIND2
PFIND9:	BITB	#^X80,(R10)+
		BEQLU	PFIND9
		JMP		FPIND3
FOUND:	ADDW2	#4,R10
		MOVW	R10,(R9)+
		MOVW	R5,(R9)+
		MOVW	#1,(R9)
		MOVW	(R6)+,R7
		MOVZWL	(R7)+,R11
		JMP		(R11)
BOK:	MOVW	(R10),R10
		MOVW	(R9),R11
		JMP		FIND1
		
		.BYTE	^X87
		.ASCII	/ENCLOS/
		.BYTE	^XC5
		.WORD	FIND-9
ENCL:	.WORD	ENCL+2

		CLRL	R4
		CLRL	R11
		SUBW2	#2,R9
		MOVZWL	(R9)+,R10
		MOVZBL	(R9),R5
LOP1:	TSTB	(R10)
		BEQLU	NULL
		SUBB3	(R10),R5,R4
		BNEQU	FRST
		INCW	R10
		INCW	R11
		JMP		LOP1
FRST:	MOVW	R11,(R9)+
LOP2:	TSTB	(R10)
		BEQLU	NULL1
		SUBB3	(R10),R5,R4
		BEQLU	DELIM
		INCW	R10
		INCW	R11
		JMP		LOP2
DELIM:	MOV		R11,(R9)+
		ADDW3	#1,R11,(R9)
		MOVW	(R6)+,R7
		MOVZWL	(R7)+,R11
		JMP		(R11)
NULL:	MOVW	R11,(R9)+
		ADDW3	#1,R11,(R9)+
		JMP		NULL2
NULL1:	MOVW	R11,(R9)+
NULL2:	MOVW	R11,(R9)
		MOVW	(R6)+,R7
		MOVZWL	(R7)+,R11
		JMP		(R11)
		
		.BYTE	^X85
		.ASCII	/CMOV/
		.BYTE 	^XC5
		.WORD	ENCL-10
CMOVE	.WORD	CMOVE+2


		MOVZWL	(R9), R5
		MOVZWL	-(R9),R10
		MOVZWL	-(R9),R11
		SUBW2	#2,R9
LUUP:	MOVB	(R11)+,(R10)+
		SOBGTR	R5,LUUP
		MOVW	(R6)+,R7
		MOVZWL	(R7)+,R11
		JMP		(R11)

		.BYTE	^X82
		.ASCII	/U/
		.BYTE	^XAA
		.WORD	CMOVE-8
USTAR:	.WORD	USTAR+2
		MOVZWL	(R9),R10
		MOVZWL	-(R9),R11
		MULL3	R11,R10,R11
		MOVL	R11,(R9)
		ADDW2	#2,R9
		MOVW	(R6)+,R7
		MOVZWL	(R7)+,R11
		JMP		(R11)
		
		.BYTE	^X82
		.ASCII	/U/
		.BYTE	^XAF
		.WORD	USTAR-5
USLSH:	.WORD	USLSH+2
		CLRL	R11
		MOVZWL	(R9),R4
		SUBW2	#4,R9
		MOVL	(R9),R10
		EDIV	R4,R10,R4,R10
		MOVW	R10,(R9)+
		MOVW	R4,(R9)
		MOVW	(R6)+,R7
		MOVZWL	(R7)+,R11
		JMP		(R11)
		
		.BYTE	^X83
		.ASCII	/AN/
		.BYTE	^XC4
		.WORD	USLSH-5
FAND:	.WORD	FAND+2
		MCOMW	(R9),R10
		BICW2	R10,-(R9)
		MOVW	(R6)+,R7
		MOVZWL	(R7)+,R11
		JMP		(R11)
		
		.BYTE	^X82
		.ASCII	/O/
		.BYTE	^XD2
		.WORD	FAND-6
FFOR:	.WORD	FFOR+2
		BISW2	(R9),-(R9)
		MOVW	(R6)+,R7
		MOVZWL	(R7)+,R11
		JMP		(R11)
		
		.BYTE	^X83
		.ASCII	/XO/
		.BYTE	^XD2
		.WORD	FFOR-5
FXOR:	.WORD	FXOR+2
		XORW2	(R9),-(R9)
		MOVW	(R6)+,R7
		MOVZWL	(R7)+,R11
		JMP		(R11)
		
		.BYTE	^X83
		.ASCII	/SP/
		.BYTE	^XC0
		.WORD	FXOR-6
FSPAT:	.WORD	FSPAT+2
		MOVW	R9,R10
		ADDW2	#2,R9
		MOVW	R10,(R9)
		MOVW	(R6)+,R7
		MOV2WL	(R7)+,R11
		JMP		(R11)
		
		.BYTE	^X83
		.ASCII	/SP/
		.BYTE	^XA1
		.WORD	FSPAT-6
SP1:	.WORD	SP1+2
		ADDW3	#^X6,R3,R4
		SUBW3	#2,(R4),R9
		MOVW	(R6)+,R7
		MOVZWL	(R7)+,R11
		JMP		(R11)
		
		.BYTE	^X83
		.ASCII	/RP/
		.BYTE	^XA1
		.WORD	SP1-6
RP1:	.WORD	RP1+2
		ADDW3	#^X8,R3,R4
		MOVW	(R4),R8
		MOVW	(R6)+,R7
		MOVZWL	(R7)+,R11
		JMP		(R11)
		
		.BYTE	^X82
		.ASCII	/;/
		.BYTE	^XD3
		.WORD	RP1-6
SEMIS:	.WORD	SEMIS+2
		MOVW	(R8)+,R6
		MOVW	(R6)+,R7
		MOVZWL	(R7)+,R11
		JMP		(R11)
		
		.BYTE	^X85
		.ASCII	/LEAV/
		.BYTE	^XC5
		.WORD 	SEMIS-5
LVE:	.WORD	LVE+2
		MOVW	(R8)+,R10
		MOVW	R10,(R8)
		SUBW2	#2,R8
		MOVW	(R6)+,R7
		MOVZWL	(R7)+,R11
		JMP		(R11)
		
		.BYTE	^X82
		.ASCII 	/>/
		.BYTE	^XD2
		.WORD	LVE-8
GR:		.WORD	GR+2
		MOVW	(R9),-(R8)
		SHRW2	#2,R9
		MOVW	(RW)+,R7
		MOVZWL	(R7)+,R11
		JMP		(R11)
		
		.BYTE	^X82
		.ARCII	/R/
		.BYTE	^XBE
		.WORD	GR-5
RG:		.WORD	RG+2
		ADDW2	#2,R9
		MOVW	(R8)+,(R9)
		MOVW	(R6)+,R7
		MOVZWL	(R7
		JMP		(R11)
		
		.BYTE	^X81
		.BYTE	^XD2
		.WORD	RG-5
R:		.WORD	R+2
		ADDW2	#2,R9
		MOVW	(R8),(R9)
		MOVW	(R6)+,R7
		MOVZWL	(R7)+,R11
		JMP		(R11)
		
		.BYTE	^X82
		.ASCII	/0/
		.BYTE	^XBD
		.WORD	R-4
ZEQAL:	.WORD	ZEQAL+2
		TSTW	(R9)
		BNEQ	NONE
		MOVW	#^X01,(R9)
		MOVW	(R6)+,(R7)
		MOVZWL	(R7)+,R11
		JMP		(R11)
NONE:	MOVW	#0,(R9)
		MOVW	(R6)+,R7
		MOVZWL	(R7)+,R11
		JMP		(R11)
		
		.BYTE	^X83
		.ASCII	/D0/
		.BYTE	^XDB
		.WORD	ZEQUAL-5
DZEQL:	.WORD	DZEQL+2
		SUBW2	#2,R9
		TSTL	(R9)
		BNEQ	DNONE
		MOVW	#^X01,(R9)
		MOVW	(R6)+,R7
		MOVZWL	(R7)+,R11
		JMP		(R11)
DNONE:	MOVW	#0,(R9)
		MOVW	(R6)+,R7
		MOVZWL	(R7)+,(R11)
		JMP		(R11)
		
		.BYTE	^X82
		.ASCII	/0/
		.BYTE	^XBC
		.WORD	DZEQL-6
ZLESS:	.WORD	ZLESS+2
		TSTW	(R9)
		BLSS	ZLONE
		MOVW	#0,(R9)
		MOVW	(R6)+,R7
		MOVZWL	(R7)+,R11
		JMP		(R11)
ZLONE:	MOVW	#^X01,(R9)
		MOVW	(R6)+,(R7)
		MOVZWL	(R7)+,R11
		JMP		(R11)
		
		.BYTE	^X81
		.BYTE	^XAB
		.WORD	ZLESS-5
PLUS:	.WORD	PLUS+2
		ADDW2	(R9),-(R9)
		MOVW	(R6)+,R7
		MOVZWL	(R7)+,R11
		JMP		(R11)
		
		.BYTE	^X85
		.ASCII 	/MINU/
		.BYTE	^XD3
		.WORD	PLUS-4
MINUS:	.WORD	MINUS+2
		MNEGW	(R9),(R9)
		MOVW	(R6)+,R7
		MOVZWL	(R7)+,R11
		JMP		(R11)
		
		BYTE	^X82
		.ASCII	/D/
		.BYTE	^XAB
		.WORD	MINUS-8
DPLUS:	.WORD	DPLUS+2
		SUBW2	#2,R9
		ADDL2	(R9),-(R9)
		ADDW2	#2,R9
		MOVW	(R6)+,R7
		MOV2WL	(R7)+,R11
		JMP		(R11)
		
		.BYTE	^X86
		.ASCII	/DMINU/
		.BYTE	^XD3
		.WORD	DPLUS-5
DMIN:	.WORD	DMIN+2
		SUBW2	#2,R9
		MNEGL 	(R9),(R9)
		ADDW2	#2,R9
		MOVW	(R6)+,R7
		MOVZWL	(R7)+,R11
		JMP		(R11)
		
		.BYTE	^X84
		.ASCII	/DRO/
		.BYTE	^D0
		.WORD	DMIN-9
DROP:	.WORD	DROP+2
		SUBW2	#2,R9
		MOVW	(R6)+,R7
		MOVZWL	(R7)+R11
		JMP		(R11)
		
		.BYTE	^X84
		.ASCII	/OVE/
		.BYTE	^XD2
		.WORD	DROP-7
OVER:	.WORD	OVER+2
		SUBW2	#2,R9
		MOVW	(R9)+,R10
		ADDW2	#2,R9
		MOVW	R10,(R9)
		MOVW	(R6)+,R7
		MOVZWL	(R7)+,R11
		JMP		(R11)
		
		.BYTE	^X84
		.ASCII	/SWA/
		.BYTE	^XD0
		.WORD 	OVER-7
SWAP:	.WORD	SWAP+2
		MOVW	(R9),R10
		MOVW	-(R9),R11
		MOVW	R10,(R9)+
		MOVW	R11,(R9)
		MOVW	(R6)+,R7
		MOVZWL	(R7)+,R11
		JMP		(R11)
		
		.BYTE	^X83
		.ASCII	/DU/
		.BYTE	^XD0
		.WORD 	SWAP-7
DUP:	.WORD 	DUP+2
		MOVW	(R9)+,(R9)
		MOVW	(R6)+,R7
		MOVZWL	(R7)+,R11
		JMP		(R11)
		
		.BYTE	^X82
		.ASCII	/+/
		.BYTE	^XA1
		.WORD 	DUP-6
PLUSS:	.WORD	PLUSS+2
		MOVZWL	(R9),R10
		ADDW	-(R9),(R10)
		SUBW2	#2.R9
		MOVW	(R6)+,R7
		MOVZWL	(R7)+,R11
		JMP		(R11)
		
		.BYTE	^X86
		.ASCII	/TOGGL/
		.BYTE	^XC5
		.WORD	PLUSS-5
TGLE:	.WORD	TGLE+2
		MOVB	(R9),R4
		MOVZWL	-(R9),R10
		SUBW2	#2,R9
		XORB2	R4,(R10)
		MOVW	(R6)+,R7
		MOVZWL	(R7)+R11
		JMP		(R11)
		
		.BYTE	^X81
		.BYTE	^XC0
		.WORD	TGLE-9
AT:		.WORD	AT+2
		MOVZWL	(R9),R11
		MOVW	(R11),(R9)
		MOVW	(R6)+,R7
		MOVZWL	(R7)+,R11
		JMP		(R11)
		
		.BYTE	^X82
		.ASCII	/C/
		.BYTE	^XC0
		.WORD	AT-4
CAT:	.WORD	CAT+2
		MOVZWL	(R9),R10
		MOVZBW	(R10),(R9)
		MOVW	(R6)+,R7
		MOVZWL	(R7)+,R11
		JMP		(R11)
		
		.BYTE	^X81
		.BYTE	^XA1
		.WORD	CAT-5
EX:		.WORD	EX+2
		MOVZWL	(R9),R10
		MOVW	-(R9),(R10)
		SUBW2	#2,R9
		MOVW	(R6)+,R7
		MOVZWL	(R7)+,R11
		JMP		(R11)
		
		.BYTE	^X82
		.ASCII	/C/
		.BYTE	^XA1
		.WORD	EX-4
CEX:	.WORD	CEX+2
		MOVZWL	(R9),R10
		SUBW2	#2,R9
		MOVB	(R9),(R10)
		SUBW2	#2,R9
		MOVW	(R6)+,R7
		MOVZWL	(R7)+,R11
		JMP		(R11)
		
		.BYTE	^X84
		.ASCII	/EMI/
		.BYTE	^XD4
		.WORDCEX-5
EMIT:	.WORD	EMIT+2				;EMIT
		MOVB	(R9),TEMP1			;EMIT CHARACTER IN TEMP1
		SUBW2	#2,R9
		$QUIO_S	EFN=#1,CHAN=TTCHAN,-
		FUNC=IO$_WRITEVBLK!IO$M_NOFORMAT,-
		IOSB=TTIOSB,-
		P1=TEMP1,P2=#1
		$WAITFR_S EFN=#1
		CLRL	R5
		ADDW3	#^X1A,R3,R5
		ADDW2	#1,(R5)				;MUST INCREMENT USER VARIABLE 'OUT'
		MOVW	(R6)+,R7
		MOVZWL	(R7)+R11
		JMP		(R11)
		
		.BYTE	^X83
		.ASCII	/KE/
		.BYTE	^XD9
		.WORD	EMIT-7
KEY:	.WORD	KEY+2					;KEY
		$QIO_S	EFN=#1,CHAN=TTCHAN,-	;INPUT ONE CHARACTER WITH NO ECHO
		FUNC=#IO$_TTYREADALL!IO$M_NOECHO,-
		IOSB=TTIOSB,-
		P1=TEMP1,P2=#1					;PUT CHARACTER IN TEMP1
		$WAITFR_S EFN=#1
		ADDW2	#2,R9
		MOVZBW	TEMP1,(R9)
		MOVW	(R6)+,R7
		MOVZWL	(R7)+,R11
		JMP		(R11)
		
		.BYTE	^X89
		.ASCII	/?TERMINA/
		.BYTE	^XCC
		.WORD	KEY-6
QTERM:	.WORD	QTERM+2						;?TERMINAL
		ADDW2	#2,R9						;ALLOWS BREAK BY TYPING <CTL>C
		MOVW	CTLC,(R9)
		CLRW	CTLC
		MOVW	(R6)+,R7
		MOVZWL	(R7)+,R11
		JMP		(R11)
		
CTRLCAST:								;SERVICE ROUTINE FOR <CTL>C INTERRUPT
		.WORD	0						;MUST SET UP NEXT INTERRUPT HERE ALSO
		MOVW	#1,CTLC
		$QIO_S	CHAN=TTCHAN,-
		FUNC=#IO$_SETMODE!IO$M_CTRLCAST.-
		P1=CTRLCAST,P2=#3
		RET
		
		.BYTE	^X82
		.ASCII	/C/
		.BYTE	^XD2
		.WORD	QYERM-12
CR:		.WORD	NEST						;CR
		.WORD	PQD							;SEND CR/LF TO TERMINAL DEVICE
		.BYTE	^X02
		.BYTE	^X0D
		.BYTE	^X0A
		.WORD	SEMIS
		
NEST:	MOVW	R6,-(R8)					;RUN TIME ROUTINE WICH
		MOVW	R7,R6						;PUTS NEXT RETURN ADDR ON STACK
		MOVW	(R6)+,R7
		MOVZWL	(R7)+,R11
		JMP		(R11)
		
VAR:	ADDW2	#2,R9						;RUN TIME ROUTINES COMPILED
		MOVW	R7,(R9)						;BY VARIABLE,CONSTANT,USER
		MOVW	(R6)+,R7
		MOVZWL	(R7)+,R11
		JMP		(R11)
		
CONST:	ADDW2	#2,R9						;CONSTANT
		MOVW	(R7)+,(R9)					;A DEFINING WORD USED TO CREATE A
		MOVW	(R6)+,R7					;CONSTANT
		MOVZWL	(R7)+,R11
		JMP		(R11)
		
USER:	ADDW2	#2,R9						;USER
		ADDW3	R3,(R7)+,(R9)				;A DEFINING WORD TO CREATE A USER
		MOVW	(R6)+,R7					;VARIABLE
		MOVZWL	(R7)+,R11
		JMP		(R11)
		
;
;FROM HERE ON THE SOURCE IS GENERALLY DEFINED WITH FORTH WORD ADDRESSES
;

		.BYTE	^X81
		.BYTE	^XB0
		.WORD	CR-5
ZERO:	.WORD	CONST							;0 CONSTANT
		.WORD	0
		
		.BYTE	^X81
		.BYTE	^XB1
		.WORD	ZERO-4
ONE:	.WORD	CONST								;1 CONSTANT
		.WORD	1
		
		.BYTE	^X81
		.BYTE	^XB2
		.WORD	ONE-4
TWO:	.WORD	CONST								;2 CONSTANT
		.WORD 2
		
		.BYTE	^X82
		.ASCII	/B/
		.BYTE	^XCC
		.WORD	TWO-4
BL:		.WORD	CONST							;BL
		.WORD	^X20							;ASCII SPACE
		
		.BYTE	^X83
		.ASCII	\C/\
		.BYTE	^XCC
		.WORD	BL-5
CL:		.WORD	CONST							;C/L CONSTANT
		.WORD	^X40							;NUMBER OF CHARCTERS PER LINE
		
		.BYTE	^X85
		.ASCII	/FIRS/
		.BYTE	^XD4
		.WORD	CL-6
FIRST:	.WORD	CONST						;FIRST CONSTANT
		.WORD	FIRSTB						;ADDRESS OF FIRST SCREEN BUFFER
		
		.BYTE	^X85
		.ASCII	/LIMI/
		.BYTE	^XD4
		.WORD	FIRST-8
LIMIT:	.WORD	CONST						;LIMIT CONSTANT
		.WORD	LIMITB						;ADDRESS OF LAST LOCATION IN LAST
											;SCREEN BUFFER
												
		.BYTE	^X85
		.ASCII 	\R/BU\
		.BYTE	^XC6
		.WORD	LIMIT-8
BBUF:	.WORD	CONST						;B/BUF CONSTANT
		.WORD	^X400						; LENGTH OF SCREEN BUFFERS
		
		.BYTE	^X85
		.ASCII	\B/SC\
		.BYTE	^XD2
		.WORD	BBUF-8
BSCR:	.WORD	COST							;R/SCR CONSTANT
		.WORD	1								;BUFFERS/SCREEN
		
		.BYTE	^X86
		.ASCII 	/ORIGI/
		.BYTE	^XCE
		.WORD	BSCR-8
ORGN:	.WORD	CONST							;ORIGIN CONSTANT
		.WORD	SRTPARM-^X0C
		
		.BYTE	^X87
		.ASCII	/+ORIGI/
		.BYTE	^XCE
		.WORD	ORGN-9
PORGM:	.WORD	NEST							;+ORIGIN CONSTANT
		.WORD	ORGN
		.WORD	PLUS
		.WORD	SEMIS
		
;
;USER VARIABLES
;
	
		.BYTE	^X82
		.ASCII	/S/
		.BYTE	^XB0
		.WORD	PORGN-10
SO:		.WORD	USER								;S0
		.WORD	6									;INITIAL STATCK POINTER
		
		.BYTE	^X82
		.ASCII	/R/
		.BYTE	^XB0
		.WORD	SO-5
R0:		.WORD	USER								;R0
		.WORD	8									;INITIAL RETURN POINTER

		.BYTE	^X83
		.ASCII	/TI/
		.BYTE	^XC2
		.WORD	RO-5
TIB:	.WORD	USER							;TIB
		.WORD	^XA								;INITIAL TERMINAL INPUT BUFFER

		.BYTE	^X85
		.ASCII	/WIDT/
		.BYTE	^XC8
		.WORD	TIB-6
WIDTH:	.WORD	USER					;WIDTH
		.WORD	^XC						;INITIAL CARRAIGE WIDTH
		
		.BYTE	^X87
		.ASCII	/WARNIN/
		.BYTE	^XC7
		.WORD	WIDTH-8
WRNG:	.WORD	USER					;WARNING
		.WORD	^XE						;USED FOR MESSAGE CONTROL. DEFAULT IS
										;1 FOR ERROR MESSAGES FROM DISK
		.BYTE	^X85
		.ASCII	/FENC/
		.BYTE	^XC5
		.WORD 	WRNG-10
FNCE:	.WORD	USER					;FENCE
		.WORD	^X10					;VARIABLE WHICH SETS THE LIMIT FOR
										;"FORGET"ING DICTIONARY DEFINITIONS
		.BYTE	^X82
		.ASCII	/D/
		.BYTE	^XD0
		.WORD 	FNCE-8
DP:		.WORD	USER					;DP
		.WORD	^X12					;VARIABLE WHICH CONTAINS THE DICTIONARY
										;POINTER
		.BYTE	^X88
		.ASCII	/VOC-LIN/
		.BYTE	^XCB
		.WORD	DP-5
VL:		.WORD	USER					;VOC-LINK
		.WORD	^X14					;VOCABULARY LINK
		
		.BYTE	^X83
		.ASCII	/BL/
		.BYTE	^XCB
		.WORD	VL-11
BLK:	.WORD	USER					;BLK
		.WORD	^X16					;BLOCK NUMBER

		.BYTE	^X82
		.ASCII	/I/
		.BYTE	^XCE
		.WORD	BLK-6
FIN:	.WORD	USER					;IN
										;VARIABLE WHICH CONTAINS THE BYTE OFF-
										;SET IN INPUT TEXT BUFFER TO NEXT WORD
		.BYTE	^X83
		.ASCII	/OU/
		.BYTE	^XD4
		.WORD	FIN-5
FOUT:	.WORD	USER					;OUT
		.WORD	^X1A					;VARIABLE WHICH IS INCREMENTED BY EMIT

		.BYTE	^X83
		.ASCII	/SC/
		.BYTE	^XD2
		.WORD	FOUT-6
FSCR:	.WORD	USER					;SRC
		.WORD	^X1C					;VARIABLE WHICH CONTAINS THE SCREEN
										;NUMBER MOST RECENTLY USED BY LIST
		.BYTE	^X86
		.ASCII	/OFFSE/
		.BYTE	^XD4
		.WORD	FSCR-6
OFST:	.WORD	USER					;OFFSET
		.WORD	^X1E					;VARIABEL WHICH CONTAINS BLOCK OFFSET
										;TO DISK DRIVES, NOT USED HERE
		.BYTE	^X87
		.ASCII	/CONTEX/
		.BYTE	^XD4
		.WORD	OFST-9
CNTX:	.WORD	USER					;CONTEXT
		.WORD	^X20					;VARIABLE WHICH POINTS TO THE CURRENT
										;VOCABULARY
		.BYTE	^X87
		.ASCII	/CURREN/
		.BYTE	^XD4
		.WORD	CNTX-10
CRNT:	.WORD	USER					;CURRENT
		.WORD	^X22					;
		
		.BYTE	^X85
		.ASCII	/STAT/
		.BYTE	^XC5
		.WORD	CRNT-10
STT:	.WORD	USER					;STATE
		.WORD	^X24
		
		.BYTE	^X84
		.ASCII	/BAS/
		.BYTE	^XC5
		.WORD	STT-8
BASE:	.WORD	USER					;BASE
		.WORD	^X26
		
		.BYTE	^X83
		.ASCII	/DP/
		.BYTE	^XCC
		.WORD	BASE-7
DPL:	.WORD	USER					;DPL
		.WORD	^X28
		
		.BYTE	^X83
		.ASCII	/FL/
		.BYTE	^XC4
		.WORD	DPL-6
FLD:	.WORD	USER				;FLD
		.WORD	^X2A
		
		.BYTE	^X83
		.ASCII	/CS/
		.BYTE	^XD0
		.WORD	FLD-6
CSP:	.WORD	USER				;CSP
		.WORD	^X2C
		
		.BYTE	^X82
		.ASCII	/R/
		.BYTE	^XA3
		.WORD	CSP-6
RNU:	.WORD	USER					;R#
		.WORD	^X2E
		
		.BYTE	^X83
		.ASCII	/HL/
		.BYTE	^XC4
		.WORD	RNU-5
HLD:	.WORD	USER					;HLD
		.WORD	^X30
		
		.BYTE	^X82
		.ASCII	/D/
		.BYTE	^XD6
		.WORD	HLD-6
DIS:	.WORD	USER					;DI
		.WORD	^X32
		
;
;END OF USER VARIABLES
;

		.BYTE	^X82
		.ASCII	/1/
		.BYTE	^XAB
		.WORD	DIS-5
PLUS1:	.WORD	NEST					;1+
		.WORD	ONE
		.WORD	PLUS
		.WORD	SEMIS
		
		.BYTE	^X82
		.ASCII	/2/
		.BYTE	^XAB
		.WORD	PLUS1-5
PLUS2:	.WORD	NEST							;2+
		.WORD	TWO
		.WORD	PLUS
		.WORD	SEMIS
		
		.BYTE	^X84
		.ASCII	/HER/
		.BYTE	^XC5
		.WORD	PLUS2-5
HERE:	.WORD	NEST					;HERE
		.WORD	DP
		.WORD	AT
		.WORD	SEMIS
		
		.BYTE	^X85
		.ASCII	/ALLO/
		.BYTE	^XD4
		.BYTE	HERE-7
ALLOT:	.WORD	NEST						;ALLOT
		.WORD	DP
		.WORD	PLUSS
		.WORD	SEMIS
		
		.BYTE	^X81
		.BYTE	^XAC
		.WORD	ALLOT-8
COMMA:	.WORD	NEST						;,
		.WORD	HERE
		.WORD	EX
		.WORD	TWO
		.WORD	ALLOT
		.WORD	SEMIS
		
		.BYTE	^X82
		.ASCII	/C/
		.BYTE	^XAC
		.WORD	COMMA-4
CCMA:	.WORD	NEST						;C,
		.WORD	HERE
		.WORD	CFX
		.WORD	ONE
		.WORD	ALLOT
		.WORD	SEMIS
		
		.BYTE	^X81
		.BYTE	^XAD
		.WORD	CCMA-5
MINS:	.WORD	NEST						;-
		.WORD	MINUS
		.WORD	PLUS
		.WORD	SEMIS
		
		.BYTE	^X81
		.BYTE	^BD
		.WORD	MINS-4
EQL:	.WORD	NEST						;=
		.WORD	MINS
		.WORD	ZEQAL
		.WORD	SEMIS
		
		.BYTE	^X81
		.BYTE	^XBC
		.WORD	EQL-4
LESS:	.WORD	NEST						;<
		.WORD	MINS
		.WORD	ZLESS
		.WORD	SEMIS
		
		.BYTE	^X81
		.BYTE	^XBE
		.WORD	LESS-4
GTR:	.WORD	NEST						;>
		.WORD	SWAP
		.WORD	LESS
		.WORD	SEMIS
		
		.BYTE	^X83
		.ASCII	/RO/
		.BYTE	^XD4
		.WORD	GTR-4
ROT:	.WORD	NEST					;ROT
		.WORD	GR
		.WORD	SWAP
		.WORD	RG
		.WORD	SWAP
		.WORD	SEMIS
		
		.BYTE	^X85
		.ASCII	/SPAC/
		.BYTE	^XC5
		.WORD	ROT-6
SPC:	.WORD	NEST						;SPACE
		.WORD	BL
		.WORD	EMIT
		.WORD	SEMIS
		
		.BYTE	^XR4
		.ASCII	/-DU/
		.BYTE	^XD0
		.WORD	SPC-8
MDUP:	.WORD	NEST					;-DUP
		.WORD	DUP
		.WORD	ZBRCH
		.WORD	.+4
		.WORD	DUP
		.WORD	SEMIS
		
		.BYTE	^X88
		.ASCII	/TRAVERS/
		.BYTE	^XC5
		.WORD	MDUP-7
TRVS:	.WORD	NEST					;TRAVERSE
		.WORD	SWAP
TR1:	.WORD	OVER
		.WORD	PLUS
		.WORD	LIT
		.WORD	^X7F
		.WORD	OVER
		.WORD	CAT
		.WORD	LESS
		.WORD	ZBRCH
		.WORD	TR1
		.WORD	SWAP
		.WORD	DROP
		.WORD	SEMIS
		
		.BYTE	^X86
		.ASCII	/LATES/
		.BYTE	^XD4
		.WORD	TRVS-11
LTST:	.WORD	NEST							;LATEST
		.WORD	CRNT
		.WORD	AT
		.WORD	AT
		.WORD	SEMIS
		
		.BYTE	^X83
		.ASCII	/LF/
		.BYTE	^XC1
		.WORD	LTST-9
LFA:	.WORD	NEST							;LFA
		.WORD	LIT
		.WORD	4
		.WORD	MINS
		.WORD	SEMIS
		
		































END.
